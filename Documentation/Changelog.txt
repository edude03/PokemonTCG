ChangeLog
----------------
[04/04/08] Added Code to load a custom deck for easier debugging
		   Added Debug menu, allows me to test a few things while the application is running w/o the immediate window : D
		   (X)TODO: Implement a method to choose which deck to use, put temp code in for this function already
		   Implemented Regions to make the code more managable, yes its becoming a mess quickly :(
		   (x)TODO: Implement a way to keep the music playing in anycase, not loop or play two copies
		   Fixed the deck name load bug 60% already
		   (X)TODO: Implement a check on the state of the music thread, it keeps getting relaunched due to some methods callling main()
		   (X)TODO: Fix giant "mycard()" glitch ASAP
		   TODO: Implement Retreat
		   TODO: Implement a deck search function in the debug menu
		   TODO: Consider making Debug menu into utility later
		   Implemented deckload code, 
		   (x)TODO: Debug deckcode.
		   (X)TODO: Fix classes, player.newhand() bug discovered
		   Fixed: Passing bogus id to newhand, made it optional
		   Futureproofed myplayer.NewHand, will generate hand of 'newValue' size allowing for +/- 7 cards to be drawn at the begining
		   TODO: Recursion method.
		   Manually reviewed sourcecode

[04/05/08] Fixed: passes the deck to the 'DeckCode' method instead of trying to access the variable from inside the method		   
		   Changed 'NewHand()' to a sub instead a function since it doesn't need to pass a result at the moment
		   TODO: Implement network code, and intergrate encrpytion
		   WARANING: myplayer in DebugMenu is not the myplayer use in the main sub, however, should be passed back in : D
		   (x)TODO: Fix the multidimension code in CSV loader, it may have to allow multiple lines to be concatenated into one
		   Fixed: myplayer.hand.length (I forget an array starts at zero, and .NewHand(7) cases an array of 8 cards to be made : /
		   
[04/06/08] Fixed: Code for CSV loader, though it throws an RankException :|

[04/17/08] rewrote CSV loader from scratch.
		   conglomerated loadDeck and importCSV	: D
		   TODO: Implement control over the music (it is a public sub right?)
		   (x)TODO: Fix the wierd myplayer.deck = 0 glitch
		   
[04/22/08] Added code to select a deck, hasn't been implemented in the code however
		   (X)TODO: Add code to check if the returned values from load deck are valid	
		   Added a sanity check to music, to be removed later as its not necessary anymore
		   FIXED: Got the prefabbed deck into the players hand, code is closer to refactoring
		   TODO: Add Error checking for input
		   TODO: Implement retreat and check bench code
		   
[04/23/08] Manually Reviewed Code; Awaiting Sync with source
		   Implemented the Deckload code, apparently works fine
		   Moved the deck generation code into the deck check code
		   Added code to prevent crash from an invalid deck file
		   TODO: Make decks that will test different catchs
		   Added code to prevent the loading of decks larger than 60 cards
		   Added code to prevent values greater than 4086 and less than 0 from being loaded.

[04/24/08] TODO: Use while loop to return from catch
		   TODO: dim mycard() as integer {60} ' should fix the glitch
		   FIXED: Other than showing up twice, the deckload should be prepared for any error
		   TODO: Implement player() as an array 
		   
[05/23/08] Fixed: MyCard glitch
		   FIXED: Populate glitch (had it too many times causing 12 second lag)
		   FIXED: Populate glitch again, no more mycard()
		   TODO: rethink OOP stragegy
		   (X)TODO: BOGUS_ID = 0 glitch after populate()

[05/23/08] FIXED: move(), still glitchy however		   
		   TODO: Make all the arrays init together
		   TODO: Cleanup CSV loader,
		   TODO: Wierd Glitch in move(), since both source and dest have to be init as card, 
				 gettype.name will always be card, therefore needs to be fixed so that it detects
				 'is nothing'
		   TODO: fix move().sort
		   FIXED: move glitches
		   TODO: Make sure move doesn't increase the size of deck or bench, or put cards at the top of the deck
		   TODO: Tidy up debug code to catch exceptions
		   FIXED: Move().sort
		   TODO: Make attack parsing method
		   
[05/24/08] Woah, found hidden glitch in dlength / deckload :O
		   FIXED: loaddeck glitch
		   ADDED: Player.int method for multiple players
		   ADDED: Shuffle()
		   TODO:  Use while loops for input; redesign them later
		   FIXED: A glitch I missed, program blows up if the loaded deck is smaller than 60 cards, since the array isn't redim'd
		   TODO: Deck needs its own init incase the user wants to change decks w/o reinit player

[05/26/08] TODO: Fix 

[06/12/08] Rewrote deckload code to be more efficent.
	       TODO: Clean up the 'DO nothing' code in the deckloader. IE if inloaddeck(i) > 4086 then {} Do nothing, use if not statements instead.
	       
[06/14/08] ADDED: Made the musicplayer play random songs

[06/18/08] (X)TODO: Investigate the fact that loading the 60 deck has 59 cards....?
		   Nearly Finished code to parse the attacks, needs to be debugged : |
		   TODO: Enumerate Effectiveness for attacks
		   WOOOOOHOOO, Wrote Local multiplayer code, began writting attack code, lots to do now.
		   TODO: Check if the pokemon put on the bench is a basic pokemon
		   TODO: Add Energies
		   TODO: Do something about cards that have 20x or whatever (like doing the virtual flip maybe with enumeration 0 = heads 1 = tails)
		   TODO: A little bit of clean up on the menu stuff.
		   TODO: Possibly make the int stuff in main a seperate method to make it a bit cleaner. 
		   TODO: Work out a virtual filesystem  method.
		   TODO: Write an update method. 
		   TODO: Use a Versioning System w/ Assemelies and such.
		   TODO: Copy the DB in to a SQL DB and rewrite the DB driver
		   TODO: Seperate the engine from the GUI 
		   TODO: Debug Card Parser, its a little buggy it seems. 
		   
[08/21/08] FIXED: LoadDeck. Always loaded one card less because dlength(0) = UBound(intLoadDeck) instead of intLoadDeck.Length
		   TODO:  Do the math sperately then apply it. IE: four virtual flips x = 4 20(x) then theirpokemon.HP = - 20(X) (See 06/18/08#7)
		   ADDED: A little more game logic, now the game can detect when a pokemon has fainted.
		   TODO: Make player pick a new benched pokemon, check if bench is empty then player wins. 
		   TODO: Make it print ATVPKM stats at begining of Turn IE: [BellSprout: 80, Normal | Digglet: 20: Poisioned, | Charmander: 40: Normal] **Make colour coded**
		   TODO: Add Status support and maybe JUST MAYBE pkm script support, though work on VFS should be done first  
           TODO: Add code to check if the destination array is growable or if it is full.
           TODO: Write Search function
           TODO: Get back to socket programming for the network code
           TODO: Fix the Select case at the start of the game
           ADDED: Code to make choose deck exit if there are no decks
			
[11/5/08]  TODO: Rewrite code to be more object oriented, ie: gets and sets